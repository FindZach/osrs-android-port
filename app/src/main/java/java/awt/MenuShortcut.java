/*
 * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.awt;

import java.awt.event.KeyEvent;

/**
 * All items in a menu must belong to the class <code>MenuItem</code>, or one of
 * its subclasses.
 * <p>
 * The default <code>MenuItem</code> object embodies a simple labeled menu item.
 * <p>
 * This picture of a menu bar shows five menu items:
 * <IMG SRC="doc-files/MenuBar-1.gif" alt="The following text describes this
 * graphic." ALIGN=CENTER HSPACE=10 VSPACE=7> <br CLEAR=LEFT>
 * The first two items are simple menu items, labeled <code>"Basic"</code> and
 * <code>"Simple"</code>. Following these two items is a separator, which is
 * itself a menu item, created with the label <code>"-"</code>. Next is an
 * instance of <code>CheckboxMenuItem</code> labeled <code>"Check"</code>. The
 * final menu item is a submenu labeled <code>"More&nbsp;Examples"</code>, and
 * this submenu is an instance of <code>Menu</code>.
 * <p>
 * When a menu item is selected, AWT sends an action event to the menu item.
 * Since the event is an instance of <code>ActionEvent</code>, the
 * <code>processEvent</code> method examines the event and passes it along to
 * <code>processActionEvent</code>. The latter method redirects the event to any
 * <code>ActionListener</code> objects that have registered an interest in
 * action events generated by this menu item.
 * <p>
 * Note that the subclass <code>Menu</code> overrides this behavior and does not
 * send any event to the frame until one of its subitems is selected.
 *
 * @author Sami Shaio
 */
public class MenuShortcut implements java.io.Serializable {
    int key;
    boolean usesShift;

    public MenuShortcut(int key) {
        this(key, false);
    }

    public MenuShortcut(int key, boolean useShiftModifier) {
        this.key = key;
        this.usesShift = useShiftModifier;
    }

    public int getKey() {
        return key;
    }

    public boolean usesShiftModifier() {
        return usesShift;
    }

    public boolean equals(MenuShortcut s) {
        return (s != null && (s.getKey() == key) && (s.usesShiftModifier() == usesShift));
    }

    public boolean equals(Object obj) {
        if (obj instanceof MenuShortcut) {
            return equals((MenuShortcut) obj);
        }
        return false;
    }

    public int hashCode() {
        return (usesShift) ? (~key) : key;
    }

    public String toString() {
        int modifiers = 0;
        if (usesShiftModifier()) {
            modifiers |= Event.SHIFT_MASK;
        }
        return KeyEvent.getKeyModifiersText(modifiers) + "+" + KeyEvent.getKeyText(key);
    }

    protected String paramString() {
        String str = "key=" + key;
        if (usesShiftModifier()) {
            str += ",usesShiftModifier";
        }
        return str;
    }
}
