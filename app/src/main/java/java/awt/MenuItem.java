/*
 * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.awt;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.EventListener;

import javax.accessibility.Accessible;
import javax.accessibility.AccessibleAction;
import javax.accessibility.AccessibleContext;
import javax.accessibility.AccessibleRole;
import javax.accessibility.AccessibleValue;

import hc.android.AndroidClassUtil;

/**
 * All items in a menu must belong to the class <code>MenuItem</code>, or one of
 * its subclasses.
 * <p>
 * The default <code>MenuItem</code> object embodies a simple labeled menu item.
 * <p>
 * This picture of a menu bar shows five menu items:
 * <IMG SRC="doc-files/MenuBar-1.gif" alt="The following text describes this
 * graphic." ALIGN=CENTER HSPACE=10 VSPACE=7> <br CLEAR=LEFT>
 * The first two items are simple menu items, labeled <code>"Basic"</code> and
 * <code>"Simple"</code>. Following these two items is a separator, which is
 * itself a menu item, created with the label <code>"-"</code>. Next is an
 * instance of <code>CheckboxMenuItem</code> labeled <code>"Check"</code>. The
 * final menu item is a submenu labeled <code>"More&nbsp;Examples"</code>, and
 * this submenu is an instance of <code>Menu</code>.
 * <p>
 * When a menu item is selected, AWT sends an action event to the menu item.
 * Since the event is an instance of <code>ActionEvent</code>, the
 * <code>processEvent</code> method examines the event and passes it along to
 * <code>processActionEvent</code>. The latter method redirects the event to any
 * <code>ActionListener</code> objects that have registered an interest in
 * action events generated by this menu item.
 * <p>
 * Note that the subclass <code>Menu</code> overrides this behavior and does not
 * send any event to the frame until one of its subitems is selected.
 *
 * @author Sami Shaio
 */
public class MenuItem extends MenuComponent implements Accessible {

    private static final String base = "menuitem";
    boolean enabled = true;
    String label;
    String actionCommand;
    long eventMask;
    transient ActionListener actionListener;
    private MenuShortcut shortcut = null;

    public MenuItem() throws HeadlessException {
        this("", null);
    }

    public MenuItem(String label) throws HeadlessException {
        this(label, null);
    }

    public MenuItem(String label, MenuShortcut s) throws HeadlessException {
        this.label = label;
        this.shortcut = s;
    }

    String constructComponentName() {
        return "";
    }

    public void addNotify() {
    }

    public String getLabel() {
        return label;
    }

    public synchronized void setLabel(String label) {
        this.label = label;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public synchronized void setEnabled(boolean b) {
        enable(b);
    }

    public synchronized void enable() {
        enabled = true;
    }

    public void enable(boolean b) {
        if (b) {
            enable();
        } else {
            disable();
        }
    }

    public synchronized void disable() {
        enabled = false;
    }

    public MenuShortcut getShortcut() {
        return shortcut;
    }

    public void setShortcut(MenuShortcut s) {
    }

    public void deleteShortcut() {
    }

    void deleteShortcut(MenuShortcut s) {
    }

    void doMenuEvent(long when, int modifiers) {
    }

    private final boolean isItemEnabled() {
        return false;
    }

    boolean handleShortcut(KeyEvent e) {
        return false;
    }

    MenuItem getShortcutMenuItem(MenuShortcut s) {
        return (s.equals(shortcut)) ? this : null;
    }

    protected final void enableEvents(long eventsToEnable) {
        eventMask |= eventsToEnable;
        newEventsOnly = true;
    }

    protected final void disableEvents(long eventsToDisable) {
        eventMask &= ~eventsToDisable;
    }

    public String getActionCommand() {
        return getActionCommandImpl();
    }

    public void setActionCommand(String command) {
        actionCommand = command;
    }

    final String getActionCommandImpl() {
        return (actionCommand == null ? label : actionCommand);
    }

    public synchronized void addActionListener(ActionListener l) {
    }

    public synchronized void removeActionListener(ActionListener l) {
    }

    public synchronized ActionListener[] getActionListeners() {
        return null;
    }

    public <T extends EventListener> T[] getListeners(Class<T> listenerType) {
        return null;
    }

    protected void processEvent(AWTEvent e) {
        if (e instanceof ActionEvent) {
            processActionEvent((ActionEvent) e);
        }
    }

    boolean eventEnabled(AWTEvent e) {
        return false;
    }

    protected void processActionEvent(ActionEvent e) {
    }

    public String paramString() {
        String str = ",label=" + label;
        if (shortcut != null) {
            str += ",shortcut=" + shortcut;
        }
        return super.paramString() + str;
    }

    private void writeObject(ObjectOutputStream s) throws IOException {
    }

    private void readObject(ObjectInputStream s)
            throws ClassNotFoundException, IOException, HeadlessException {
    }

    public AccessibleContext getAccessibleContext() {
        if (accessibleContext == null) {
            accessibleContext = new AndroidClassUtil().buildAccessibleContext(this);
        }
        return accessibleContext;
    }

    protected class AccessibleAWTMenuItem extends AccessibleAWTMenuComponent
            implements AccessibleAction, AccessibleValue {

        public String getAccessibleName() {
            if (accessibleName != null) {
                return accessibleName;
            } else {
                return "";
            }
        }

        public AccessibleRole getAccessibleRole() {
            return AccessibleRole.MENU_ITEM;
        }

        public AccessibleAction getAccessibleAction() {
            return this;
        }

        public AccessibleValue getAccessibleValue() {
            return this;
        }

        public int getAccessibleActionCount() {
            return 1;
        }

        public String getAccessibleActionDescription(int i) {
            return null;
        }

        public boolean doAccessibleAction(int i) {
            return false;
        }

        public Number getCurrentAccessibleValue() {
            return Integer.valueOf(0);
        }

        public boolean setCurrentAccessibleValue(Number n) {
            return false;
        }

        public Number getMinimumAccessibleValue() {
            return Integer.valueOf(0);
        }

        public Number getMaximumAccessibleValue() {
            return Integer.valueOf(0);
        }

    }
}
