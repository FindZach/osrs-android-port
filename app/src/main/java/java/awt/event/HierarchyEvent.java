/*
 * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.awt.event;

import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.Container;

/**
 * An event which indicates a change to the <code>Component</code> hierarchy to
 * which <code>Component</code> belongs.
 * <ul>
 * <li>Hierarchy Change Events (HierarchyListener)
 * <ul>
 * <li>addition of an ancestor
 * <li>removal of an ancestor
 * <li>hierarchy made displayable
 * <li>hierarchy made undisplayable
 * <li>hierarchy shown on the screen (both visible and displayable)
 * <li>hierarchy hidden on the screen (either invisible or undisplayable)
 * </ul>
 * <li>Ancestor Reshape Events (HierarchyBoundsListener)
 * <ul>
 * <li>an ancestor was resized
 * <li>an ancestor was moved
 * </ul>
 * </ul>
 * <p>
 * Hierarchy events are provided for notification purposes ONLY. The AWT will
 * automatically handle changes to the hierarchy internally so that GUI layout
 * and displayability works properly regardless of whether a program is
 * receiving these events or not.
 * <p>
 * This event is generated by a Container object (such as a Panel) when the
 * Container is added, removed, moved, or resized, and passed down the
 * hierarchy. It is also generated by a Component object when that object's
 * <code>addNotify</code>, <code>removeNotify</code>, <code>show</code>, or
 * <code>hide</code> method is called. The {@code ANCESTOR_MOVED} and
 * {@code ANCESTOR_RESIZED} events are dispatched to every
 * <code>HierarchyBoundsListener</code> or <code>HierarchyBoundsAdapter</code>
 * object which registered to receive such events using the Component's
 * <code>addHierarchyBoundsListener</code> method.
 * (<code>HierarchyBoundsAdapter</code> objects implement the <code>
 * HierarchyBoundsListener</code> interface.) The {@code HIERARCHY_CHANGED}
 * events are dispatched to every <code>HierarchyListener</code> object which
 * registered to receive such events using the Component's
 * <code>addHierarchyListener
 * </code> method. Each such listener object gets this <code>HierarchyEvent
 * </code> when the event occurs.
 * <p>
 * An unspecified behavior will be caused if the {@code id} parameter of any
 * particular {@code HierarchyEvent} instance is not in the range from
 * {@code HIERARCHY_FIRST} to {@code HIERARCHY_LAST}. <br>
 * The {@code changeFlags} parameter of any {@code HierarchyEvent} instance
 * takes one of the following values:
 * <ul>
 * <li>{@code HierarchyEvent.PARENT_CHANGED}
 * <li>{@code HierarchyEvent.DISPLAYABILITY_CHANGED}
 * <li>{@code HierarchyEvent.SHOWING_CHANGED}
 * </ul>
 * Assigning the value different from listed above will cause unspecified
 * behavior.
 *
 * @author David Mendenhall
 * @see HierarchyListener
 * @see HierarchyBoundsAdapter
 * @see HierarchyBoundsListener
 * @since 1.3
 */
public class HierarchyEvent extends AWTEvent {
    public static final int HIERARCHY_FIRST = 1400;
    public static final int HIERARCHY_CHANGED = HIERARCHY_FIRST;
    public static final int ANCESTOR_MOVED = 1 + HIERARCHY_FIRST;
    public static final int ANCESTOR_RESIZED = 2 + HIERARCHY_FIRST;
    public static final int HIERARCHY_LAST = ANCESTOR_RESIZED;
    public static final int PARENT_CHANGED = 0x1;
    public static final int DISPLAYABILITY_CHANGED = 0x2;
    public static final int SHOWING_CHANGED = 0x4;

    Component changed;
    Container changedParent;
    long changeFlags;

    public HierarchyEvent(Component source, int id, Component changed, Container changedParent) {
        super(source, id);
        this.changed = changed;
        this.changedParent = changedParent;
    }

    public HierarchyEvent(Component source, int id, Component changed, Container changedParent,
                          long changeFlags) {
        super(source, id);
        this.changed = changed;
        this.changedParent = changedParent;
        this.changeFlags = changeFlags;
    }

    public Component getComponent() {
        return (source instanceof Component) ? (Component) source : null;
    }

    public Component getChanged() {
        return changed;
    }

    public Container getChangedParent() {
        return changedParent;
    }

    public long getChangeFlags() {
        return changeFlags;
    }

    public String paramString() {
        return "";
    }
}