/*
 * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.awt.event;

import java.awt.AWTEvent;
import java.awt.Component;

/**
 * A low-level event which indicates that a component moved, changed size, or
 * changed visibility (also, the root class for the other component-level
 * events).
 * <p>
 * Component events are provided for notification purposes ONLY; The AWT will
 * automatically handle component moves and resizes internally so that GUI
 * layout works properly regardless of whether a program is receiving these
 * events or not.
 * <p>
 * In addition to serving as the base class for other component-related events
 * (InputEvent, FocusEvent, WindowEvent, ContainerEvent), this class defines the
 * events that indicate changes in a component's size, position, or visibility.
 * <p>
 * This low-level event is generated by a component object (such as a List) when
 * the component is moved, resized, rendered invisible, or made visible again.
 * The event is passed to every <code>ComponentListener</code> or
 * <code>ComponentAdapter</code> object which registered to receive such events
 * using the component's <code>addComponentListener</code> method.
 * (<code>ComponentAdapter</code> objects implement the
 * <code>ComponentListener</code> interface.) Each such listener object gets
 * this <code>ComponentEvent</code> when the event occurs.
 * <p>
 * An unspecified behavior will be caused if the {@code id} parameter of any
 * particular {@code ComponentEvent} instance is not in the range from
 * {@code COMPONENT_FIRST} to {@code COMPONENT_LAST}.
 *
 * @author Carl Quinn
 * @see ComponentAdapter
 * @see ComponentListener
 * @see <a href=
 * "http://java.sun.com/docs/books/tutorial/post1.0/ui/componentlistener.html">Tutorial:
 * Writing a Component Listener</a>
 * @since 1.1
 */
public class ComponentEvent extends AWTEvent {

    public static final int COMPONENT_FIRST = 100;

    public static final int COMPONENT_LAST = 103;

    public static final int COMPONENT_MOVED = COMPONENT_FIRST;

    public static final int COMPONENT_RESIZED = 1 + COMPONENT_FIRST;

    public static final int COMPONENT_SHOWN = 2 + COMPONENT_FIRST;

    public static final int COMPONENT_HIDDEN = 3 + COMPONENT_FIRST;

    public ComponentEvent(Component source, int id) {
        super(source, id);
    }

    public Component getComponent() {
        return (source instanceof Component) ? (Component) source : null;
    }

    public String paramString() {
        return "unknown type";
    }
}
