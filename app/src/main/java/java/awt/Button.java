/*
 * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.awt;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.EventListener;

import javax.accessibility.Accessible;
import javax.accessibility.AccessibleContext;
import javax.swing.JButton;

import hc.android.AndroidClassUtil;

/**
 * This class creates a labeled button. The application can cause some action to
 * happen when the button is pushed. This image depicts three views of a
 * "<code>Quit</code>" button as it appears under the Solaris operating system:
 * <p>
 * <img src="doc-files/Button-1.gif" alt="The following context describes the
 * graphic" ALIGN=center HSPACE=10 VSPACE=7>
 * <p>
 * The first view shows the button as it appears normally. The second view shows
 * the button when it has input focus. Its outline is darkened to let the user
 * know that it is an active object. The third view shows the button when the
 * user clicks the mouse over the button, and thus requests that an action be
 * performed.
 * <p>
 * The gesture of clicking on a button with the mouse is associated with one
 * instance of <code>ActionEvent</code>, which is sent out when the mouse is
 * both pressed and released over the button. If an application is interested in
 * knowing when the button has been pressed but not released, as a separate
 * gesture, it can specialize <code>processMouseEvent</code>, or it can register
 * itself as a listener for mouse events by calling
 * <code>addMouseListener</code>. Both of these methods are defined by
 * <code>Component</code>, the abstract superclass of all components.
 * <p>
 * When a button is pressed and released, AWT sends an instance of
 * <code>ActionEvent</code> to the button, by calling <code>processEvent</code>
 * on the button. The button's <code>processEvent</code> method receives all
 * events for the button; it passes an action event along by calling its own
 * <code>processActionEvent</code> method. The latter method passes the action
 * event on to any action listeners that have registered an interest in action
 * events generated by this button.
 * <p>
 * If an application wants to perform some action based on a button being
 * pressed and released, it should implement <code>ActionListener</code> and
 * register the new listener to receive events from this button, by calling the
 * button's <code>addActionListener</code> method. The application can make use
 * of the button's action command as a messaging protocol.
 *
 * @author Sami Shaio
 * @see java.awt.event.ActionEvent
 * @see java.awt.event.ActionListener
 * @see java.awt.Component#processMouseEvent
 * @see java.awt.Component#addMouseListener
 * @since JDK1.0
 */
public class Button extends Component implements Accessible {
    private static final String base = "button";
    private static int nameCounter = 0;
    JButton jButton;

    public Button() throws HeadlessException {
        this("");
    }

    public Button(String label) throws HeadlessException {
        this.jButton = new JButton(label);

        setPeerAdAPI(jButton.getPeerAdAPI());
    }

    String constructComponentName() {
        synchronized (Button.class) {
            return base + nameCounter++;
        }
    }

    public void addNotify() {
    }

    public String getLabel() {
        return jButton.getText();
    }

    public void setLabel(String label) {
        jButton.setText(label);
    }

    public String getActionCommand() {
        return jButton.getActionCommand();
    }

    public void setActionCommand(String command) {
        jButton.setActionCommand(command);
    }

    public synchronized void addActionListener(ActionListener l) {
        jButton.addActionListener(l);
    }

    public synchronized void removeActionListener(ActionListener l) {
        jButton.removeActionListener(l);
    }

    public synchronized ActionListener[] getActionListeners() {
        return jButton.getActionListeners();
    }

    public <T extends EventListener> T[] getListeners(Class<T> listenerType) {
        return jButton.getListeners(listenerType);
    }

    boolean eventEnabled(AWTEvent e) {
        return false;
    }

    protected void processEvent(AWTEvent e) {
        if (e instanceof ActionEvent) {
            jButton.processActionListenerAdAPI((ActionEvent) e);
        }
    }

    protected void processActionEvent(ActionEvent e) {
        jButton.processActionListenerAdAPI(e);
    }

    protected String paramString() {
        return "";
    }

    private void writeObject(ObjectOutputStream s) throws IOException {
    }

    private void readObject(ObjectInputStream s)
            throws ClassNotFoundException, IOException, HeadlessException {
    }

    public AccessibleContext getAccessibleContext() {
        if (accessibleContext == null) {
            accessibleContext = new AndroidClassUtil().buildAccessibleContext(this);
        }
        return accessibleContext;
    }

    @Override
    public void remove(MenuComponent comp) {
    }

    @Override
    public boolean postEvent(Event evt) {
        return false;
    }

}
